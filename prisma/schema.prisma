// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Main Patient model
model Patient {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Patient Info
  name              String
  gender            String
  birthDate         String
  sampleCode        String   @unique
  sampleDate        String
  reportDate        String
  checkedBy         String
  scientificContent String
  disclaimer        String   @db.Text
  signature1        String?
  signature2        String?

  // Relations
  reports Report[]

  @@map("patients")
}

// Report model
model Report {
  id        String   @id @default(uuid())
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  patientId String
  patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  // Report Content
  introduction           String? @db.Text
  genomicsExplanation    String? @db.Text
  genesHealthImpact      String? @db.Text
  fundamentalsPRS        String? @db.Text
  utilityDoctors         String? @db.Text
  microarrayExplanation  String? @db.Text
  microarrayData         String? @db.Text

  // Report Settings
  title        String?
  subtitle     String?
  companyName  String?
  headerColor  String?
  accentColor  String?
  primaryFont  String?
  secondaryFont String?
  monoFont     String?

  // Nutrition Data
  nutritionQuote       String? @db.Text
  nutritionDescription String? @db.Text

  // Sports and Fitness
  sportsAndFitness  Json?

  //preventive_tests
  preventiveHealthDescription String? @db.Text

  // Lifestyle Conditions
  lifestyleQuote       String? @db.Text
  lifestyleDescription String? @db.Text

  // Metabolic Core
  metabolicQuote       String? @db.Text
  metabolicDescription String? @db.Text

  // Digestive Health
  digestiveQuote       String? @db.Text
  digestiveDescription String? @db.Text

  // Genes and Addiction
  addictionQuote       String? @db.Text
  addictionDescription String? @db.Text

  // Sleep and Rest
  sleepQuote       String? @db.Text
  sleepDescription String? @db.Text

  // Allergies and Sensitivity
  allergyQuote        String? @db.Text
  allergyDescription  String? @db.Text
  allergyGeneralAdvice String? @db.Text

  // Report Summaries
  nutrigenomicsSummary     String? @db.Text
  exerciseGenomicsSummary  String? @db.Text

  // Metabolic Summary
  metabolicStrengths  Json? // Array of strings
  metabolicWeaknesses Json? // Array of strings

  // Diet Field Categories
  dietFieldCategories Json? // Array of strings

  // Relations to other models
  dynamicDietFieldDefinitions DynamicDietFieldDefinition[]
  patientDietAnalysis        PatientDietAnalysis[]
  nutritionData              NutritionData[]
  lifestyleConditions        LifestyleCondition[]
  lifestyleCategoryImages    LifestyleCategoryImage[]
  metabolicCoreData          MetabolicCoreData[]
  digestiveHealthData        DigestiveHealthData[]
  addictionData              AddictionData[]
  sleepData                  SleepData[]
  allergyData                AllergyData[]
  geneTestResults            GeneTestResult[]
  geneticCategories          GeneticCategory[]
  preventiveTests            PreventiveTest[]
  nutritionalSupplements     NutritionalSupplement[]
  familyGeneticImpactDescription String? @db.Text
  familyGeneticImpacts           FamilyGeneticImpact[]
  genomicAnalysisTable    GenomicAnalysisTable?
  healthSummaryDescription String? @db.Text
  healthSummaryEntries HealthSummaryEntry[]

  @@map("reports")
}

// Dynamic Diet Field Definition (Parent)
model DynamicDietFieldDefinition {
  id       String @id @default(uuid())
  reportId String
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  quote       String? @db.Text
  description String? @db.Text

  // Relations to child diet fields
  fields DynamicDietField[]

  @@map("dynamic_diet_field_definitions")
}

// Dynamic Diet Field (Child)
model DynamicDietField {
  id       String @id @default(uuid())
  
  definitionId String
  definition   DynamicDietFieldDefinition @relation(fields: [definitionId], references: [id], onDelete: Cascade)

  fieldId                String
  label                  String
  category               String
  min                    Float
  max                    Float
  highRecommendation     String @db.Text
  normalRecommendation   String @db.Text
  lowRecommendation      String @db.Text

  @@map("dynamic_diet_fields")
}

// Patient Diet Analysis Result
model PatientDietAnalysis {
  id       String @id @default(uuid())
  reportId String
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  fieldId            String
  score              Float
  level              String // LOW, NORMAL, HIGH
  recommendation     String @db.Text
  lowRecommendation  String @db.Text
  normalRecommendation String @db.Text
  highRecommendation String @db.Text
  selectedLevel      String // LOW, NORMAL, HIGH

  @@map("patient_diet_analysis")
}

// Nutrition Data
model NutritionData {
  id       String @id @default(uuid())
  reportId String
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  section      String
  field        String
  score        Float
  healthImpact String @db.Text
  intakeLevel  String
  source       String

  @@unique([reportId, section, field])
  @@map("nutrition_data")
}

// Lifestyle Conditions
model LifestyleCondition {
  id       String @id @default(uuid())
  reportId String
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  categoryId    String
  conditionName String
  status        String // strength, improvement
  description   String? @db.Text
  sensitivity   String? // low, medium, high
  avoid         Json    // Array of strings
  follow        Json    // Array of strings
  consume       Json    // Array of strings
  monitor       Json    // Array of strings
  avoidLabel    String?
  followLabel   String?
  consumeLabel  String?
  monitorLabel  String?

  @@unique([reportId, categoryId, conditionName])
  @@map("lifestyle_conditions")
}

// Lifestyle Category Images
model LifestyleCategoryImage {
  id       String @id @default(uuid())
  reportId String
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  categoryId String
  imageUrl   String @db.Text

  @@unique([reportId, categoryId])
  @@map("lifestyle_category_images")
}

// Metabolic Core Data
model MetabolicCoreData {
  id       String @id @default(uuid())
  reportId String
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  area        String
  geneName    String
  genotype    String
  impact      String @db.Text
  areaImpact  String? @db.Text
  areaAdvice  String? @db.Text  

  @@map("metabolic_core_data")
}

// Digestive Health Data
model DigestiveHealthData {
  id       String @id @default(uuid())
  reportId String
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  key         String
  title       String
  icon        String
  sensitivity String // Low, High, or empty
  good        String @db.Text
  bad         String @db.Text

  @@unique([reportId, key])
  @@map("digestive_health_data")
}

// Genes and Addiction Data
model AddictionData {
  id       String @id @default(uuid())
  reportId String
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  key             String
  title           String
  icon            String
  sensitivityIcon String

  @@unique([reportId, key])
  @@map("addiction_data")
}

// Sleep and Rest Data
model SleepData {
  id           String @id @default(uuid())
  reportId     String
  report       Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  key          String
  title        String?        
  intervention String @db.Text
  image        String?

  @@unique([reportId, key])
  @@map("sleep_data")
}

// Allergy Data
model AllergyData {
  id       String @id @default(uuid())
  reportId String
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  key   String?
  title String?
  image String? @db.Text

  @@unique([reportId, key])
  @@map("allergy_data")
}

// Gene Test Results
model GeneTestResult {
  id       String @id @default(uuid())
  reportId String
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  genecode  String? 
  geneName  String
  variation String
  result    String @db.Text

  @@map("gene_test_results")
}

// Genetic Categories
model GeneticCategory {
  id       String @id @default(uuid())
  reportId String
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  categoryId  String
  category    String
  imageUrl    String @db.Text
  description String @db.Text
  parameters  Json    // Array of strings
  isActive    Boolean
  order       Int

  @@unique([reportId, categoryId])
  @@map("genetic_categories")
}

// Preventive Health - Diagnostic Tests
model PreventiveTest {
  id       String @id @default(uuid())
  reportId String
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  testName  String
  frequency String // halfYearly, yearly

  @@map("preventive_tests")
}

// Preventive Health - Nutritional Supplements
model NutritionalSupplement {
  id       String @id @default(uuid())
  reportId String
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  supplement String
  needed     Boolean

  @@map("nutritional_supplements")
}

// Family Genetic Impact
model FamilyGeneticImpact {
  id       String @id @default(uuid())
  reportId String
  report   Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  gene          String
  normalAlleles String
  yourResult    String
  healthImpact  String @db.Text

  @@map("family_genetic_impacts")
}

// Genomic Analysis Table
model GenomicAnalysisTable {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  reportId    String @unique
  report      Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  
  description String? @db.Text
  
  categories  GenomicCategoryGroup[]
  
  @@map("genomic_analysis_tables")
}

// Genomic Category Groups
model GenomicCategoryGroup {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  genomicAnalysisTableId String
  genomicAnalysisTable   GenomicAnalysisTable @relation(fields: [genomicAnalysisTableId], references: [id], onDelete: Cascade)
  
  category      String?
  subcategories GenomicSubcategory[]
  
  @@map("genomic_category_groups")
}

// Genomic Subcategories
model GenomicSubcategory {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  genomicCategoryGroupId String
  genomicCategoryGroup   GenomicCategoryGroup @relation(fields: [genomicCategoryGroupId], references: [id], onDelete: Cascade)
  
  area        String?
  trait       String?
  genes       Json?       
  
  @@map("genomic_subcategories")
}

model HealthSummaryEntry {
  id          String @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  reportId    String
  report      Report @relation(fields: [reportId], references: [id], onDelete: Cascade)
  
  title       String
  description String @db.Text
  
  @@map("health_summary_entries")
}